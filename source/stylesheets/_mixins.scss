// GRADIENTS
@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}


// SELECTION
@mixin selection {
  ::-webkit-selection { @content; }
  ::-moz-selection { @content; }
  ::-ms-selection { @content; }
  ::-o-selection { @content; }
  ::selection { @content; }
}


// DASH
@mixin dash {
  &:after {
    display: block;
    content: "â€”";
    @content;
  }
}


// CALC
@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression}); 
  #{$property}: calc(#{$expression}); 
}


// BACKGROUND
@mixin background($position: 50%, $size: cover, $attachment: scroll, $repeat: no-repeat) {
  background: {
    position: $position;
    size: $size;
    attachment: $attachment;
    repeat: $repeat;
  }
}


// ANIMATE
@mixin animate($name: fadein, $duration: 1s, $delay: 0s) {
  -webkit-animation: {
    name: $name;
    duration: $duration;
    delay: $delay;
  }
  animation: {
    name: $name;
    duration: $duration;
    delay: $delay;
  }
}


// BREAKPOINTS
@mixin xs-max { @media (max-width: #{$screen-xs-max}) { @content; } }

@mixin sm-min { @media (min-width: #{$screen-xs-min}) { @content; } }
@mixin sm-max { @media (max-width: #{$screen-xs-max}) { @content; } }

@mixin md-min { @media (min-width: #{$screen-md-min}) { @content; } }
@mixin md-max { @media (max-width: #{$screen-md-max}) { @content; } }

@mixin lg-min { @media (min-width: #{$screen-lg-min}) { @content; } }


// SCREEN ORIENTATION
@mixin portrait { @media (orientation: #{portrait}) { @content; } }
@mixin landscape { @media (orientation: #{landscape}) { @content; } }